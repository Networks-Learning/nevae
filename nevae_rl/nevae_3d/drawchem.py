import sys
import rdkit
from rdkit import Chem
import networkx as nx
import numpy as np
from collections import defaultdict
import glob 
from rdkit.Chem import Draw
from rdkit.Chem import AllChem
from rdkit.Chem import Draw, Lipinski
from rdkit.Chem import Descriptors
#import sascorer

def getValenceDict(filename):
    f = open(filename)
    jobj = json.load(f.read())
    return jobj

def getAtom(valency):
    atom = "Un"
    if valency == 4:
        atom = 'C'
    if valency == 3:
        atom = 'N'
    if valency == 2:
        atom = 'O'
    if valency == 1:
        atom = 'H'
    if valency == 6:
        atom = 'S' 
    return atom

def guess_correct_molecules(readfile, writefile, n, multi):
    
    f = open(readfile)
    try:
        G=nx.read_edgelist(f, nodetype=int)
    except:
        f = open(readfile)
        lines = f.read()
        linesnew = lines.replace("{", "{\'weight\':").split("\n")
        G = nx.parse_edgelist(linesnew, nodetype=int)
        #return False
    #'''
    try:
     if not nx.is_connected(G):
           print "Not connected"
           #return False
    except:
        print "Null graph"
        return False
    #'''
    nodes = len(G.nodes())
    count = 1 
    #index = defaultdict(int)
    '''
    for i in range(n):
        if i not in G.nodes():
            G.add_node(i)
        else:
            index[i] = count
            count += 1
    '''
    e = len(G.edges())
    deg = []
    #deg = np.zeros(n)
    adj = np.array(nx.adjacency_matrix(G, weight='weight').todense())
    for i in range(len(G.nodes())):
        deg.append(np.sum(adj[i]))
    '''
    edges = list(G.edges_iter(data='weight'))
    for (u,v,w) in edges:
        deg[u] += w
        deg[v] += w
    '''
    deg = np.array(deg)
    #print "debug", deg
    maxdeg = deg.max()
    if maxdeg >= 5:
        return False
    #if maxdeg >= 7 or maxdeg == 5 :
    #    return False
    #print degarray
    CC = 0 
    HC = 0
    NC = 0
    OC = 0
    SC = 0

    fw = open(writefile, "w")
    
    fw.write("@<TRIPOS>MOLECULE\n")
    fw.write("Dummy Atom\n")
    fw.write(str(nodes)+" "+str(e)+"\n\n")
    
    fw.write("@<TRIPOS>ATOM\n")
    
    atom_count = 0
    #print "DE", len(degarray), degarray
    #for i in range(n):
    for i in range(len(G.nodes())):
        #print "Debug", i , deg[i]
        if deg[i] == 0:
            continue
        atom = getAtom(deg[i])
        atom_count += 1
        if atom == 'C':
            CC+=1
            fw.write(str(atom_count)+"\t"+atom+str(CC)+"\t0\t0\t0\tC\n")
        elif atom == 'N':
            NC+=1
            fw.write(str(atom_count)+"\t"+atom+str(NC)+"\t0\t0\t0\tN\n")
        elif atom == 'H':
            HC+=1
            fw.write(str(atom_count)+"\t"+atom+str(HC)+"\t0\t0\t0\tH\n")
        elif atom == 'O':
            OC+=1
            fw.write(str(atom_count)+"\t"+atom+str(OC)+"\t0\t0\t0\tO\n")
        
        elif atom=='S':
            SC+=1
            fw.write(str(atom_count)+"\t"+atom+str(SC)+"\t0\t0\t0\tS\n")
        else:
            fw.write(str(atom_count)+"\t"+atom+"\t0\t0\t0\tUN\n")
    fw.write("\n@<TRIPOS>BOND\n")
    edge_count = 0
    for (u,v) in G.edges(): #list(G.edges_iter(data='weight', default=1)):
        edge_count += 1
        w = G.get_edge_data(u,v)['weight']
        fw.write(str(edge_count) + "\t" + str(u+1) + "\t" + str(v+1) + "\t" + str(w) + "\n")
        #fw.write(str(edge_count) + "\t" + str(index[u]) + "\t" + str(index[v]) + "\t" + str(w) + "\n")
    return True


def guess_correct_molecules_from_graph(G, writefile):

    n = len(G.nodes())
    try:
        if not nx.is_connected(G):
            print "Not connected"
            #return False
    except:
        print "Null graph"
        return False
    nodes = len(G.nodes())
    count = 1
    e = len(G.edges())
    #print("Debug edges", G.edges(), G.nodes())
    deg = []
    index = defaultdict()
    count = 1
    adj = np.array(nx.adjacency_matrix(G, weight='weight').todense())
    for i in range(len(G.nodes())):
        deg.append(np.sum(adj[i]))
        if deg[i] != 0:
            index[i] = count
            count += 1

    deg = np.array(deg)
    # print "debug", deg
    maxdeg = deg.max()
    if maxdeg >= 5:
        return False
    
    CC = 0
    HC = 0
    NC = 0
    OC = 0
    SC = 0

    fw = open(writefile, "w")
    fw.write("@<TRIPOS>MOLECULE\n")
    fw.write("Dummy Atom\n")
    fw.write(str(nodes) + " " + str(e) + "\n\n")
    fw.write("@<TRIPOS>ATOM\n")

    atom_count = 0
    # print "DE", len(degarray), degarray
    for i in range(len(G.nodes())):
    #for i in range(n):
        # print "Debug", i , deg[i]
        if deg[i] == 0:
            continue
        atom = getAtom(deg[i])
        atom_count += 1
        if atom == 'C':
            CC += 1
            fw.write(str(atom_count) + "\t" + atom + str(CC) + "\t0\t0\t0\tC\n")
        elif atom == 'N':
            NC += 1
            fw.write(str(atom_count) + "\t" + atom + str(NC) + "\t0\t0\t0\tN\n")
        elif atom == 'H':
            HC += 1
            fw.write(str(atom_count) + "\t" + atom + str(HC) + "\t0\t0\t0\tH\n")
        elif atom == 'O':
            OC += 1
            fw.write(str(atom_count) + "\t" + atom + str(OC) + "\t0\t0\t0\tO\n")

        elif atom == 'S':
            SC += 1
            fw.write(str(atom_count) + "\t" + atom + str(SC) + "\t0\t0\t0\tS\n")
        else:
            fw.write(str(atom_count) + "\t" + atom + "\t0\t0\t0\tUN\n")
    fw.write("\n@<TRIPOS>BOND\n")
    edge_count = 0
    for u in range(len(deg)):
        for v in range(u, len(deg)):
        #for (u, v) in G.edges():  # list(G.edges_iter(data='weight', default=1)):
            w = adj[u][v]
            if w > 0:
                edge_count += 1
                w = adj[u][v]#G.get_edge_data(u, v)['weight']
                fw.write(str(edge_count) + "\t" + str(index[u]) + "\t" + str(index[v]) + "\t" + str(w) + "\n")
                #fw.write(str(edge_count) + "\t" + str(u+1) + "\t" + str(v+1) + "\t" + str(w) + "\n")
    return True

def drawchem(mols):
    count = 0
    mollist = []
    tokens = 0
    for mol in mols:
        
        #print tokens
        mol = Chem.RemoveHs(mol)
        AllChem.Compute2DCoords(mol)
        #mollist.append(mol)
        
        #img = Draw.MolsToGridImage([mol], molsPerRow = 1, subImgSize=(300, 300), useSVG=True)
        Draw.MolToFile(mol, sys.argv[2]+str(count)+'.svg', size=(300, 200))
        count += 1 

def calculate_property(m):
    SA_score = -sascorer.calculateScore(m)
    MW = Descriptors.MolWt(m)
    RB = Lipinski.NumRotatableBonds(m)
    logp = Descriptors.MolLogP(m)
    return (SA_score, MW, RB, logp)

if __name__=="__main__":
    
    G = nx.Graph()
    list_edges = [(0, 16, 1), (0, 26, 1), (0, 12, 1), (0, 13, 1), (1, 19, 1), (1, 11, 1), (1, 28, 1), (1, 13, 1), (2, 36, 1), (3, 16, 1), (3, 10, 2), (3, 30, 1), (4, 30, 1), (5, 16, 1), (6, 19, 1), (7, 26, 1), (8, 32, 1), (9, 16, 1), (9, 10, 1), (9, 12, 1), (9, 39, 1), (10, 22, 1), (12, 36, 1), (12, 32, 1), (13, 35, 1), (13, 14, 1), (15, 30, 1), (17, 37, 2), (17, 22, 1), (18, 36, 1), (19, 33, 1), (19, 20, 1), (21, 34, 1), (21, 36, 1), (21, 26, 1), (21, 30, 1), (22, 24, 1), (23, 26, 1), (24, 29, 2), (24, 38, 1), (25, 29, 1), (27, 32, 1), (31, 32, 1), (37, 38, 1)] 
    list_edges = [(0, 32, 1), (0, 10, 1), (0, 19, 1), (0, 12, 1), (1, 12, 1), (1, 11, 1), (1, 28, 1), (1, 13, 1), (2, 36, 1), (3, 16, 1), (3, 12, 1), (3, 30, 2), (4, 19, 1), (5, 21, 1), (6, 30, 1), (7, 30, 1), (8, 13, 1), (9, 36, 1), (9, 26, 1), (9, 12, 1), (9, 39, 1), (10, 35, 1), (10, 14, 1), (10, 15, 1), (13, 26, 1), (13, 36, 1), (16, 26, 2), (16, 21, 1), (17, 25, 1), (17, 29, 1), (17, 37, 1), (18, 32, 1), (19, 20, 1), (19, 33, 1), (21, 34, 1), (21, 38, 1), (22, 24, 1), (22, 29, 2), (23, 36, 1), (24, 25, 2), (24, 38, 1), (27, 32, 1), (31, 32, 1)]
    list_edges = [(0, 32, 1), (0, 10, 1), (0, 19, 1), (0, 12, 1), (1, 12, 1), (1, 11, 1), (1, 28, 1), (1, 13, 1), (2, 36, 1), (3, 16, 1), (3, 12, 1), (3, 30, 2), (4, 19, 1), (5, 21, 1), (6, 30, 1), (7, 30, 1), (8, 13, 1), (9, 36, 1), (9, 26, 1), (9, 12, 1), (9, 39, 1), (10, 35, 1), (10, 14, 1), (10, 15, 1), (13, 26, 1), (13, 36, 1), (16, 26, 2), (16, 21, 1), (17, 25, 1), (17, 29, 1), (17, 37, 1), (18, 32, 1), (19, 20, 1), (19, 33, 1), (21, 34, 1), (21, 38, 1), (22, 24, 1), (22, 29, 2), (23, 36, 1), (24, 25, 2), (24, 38, 1), (27, 32, 1), (31, 32, 1)]
    list_edges = [(0, 32, 1), (0, 10, 1), (0, 12, 1), (0, 14, 1), (1, 12, 1), (1, 11, 1), (1, 28, 1), (1, 30, 1), (2, 32, 1), (3, 12, 1), (3, 19, 1), (3, 36, 1), (3, 13, 1), (4, 10, 1), (5, 10, 1), (6, 19, 1), (7, 26, 1), (8, 19, 1), (9, 16, 1), (9, 21, 1), (9, 13, 1), (9, 39, 1), (10, 33, 1), (12, 30, 1), (13, 35, 1), (13, 16, 1), (15, 30, 1), (16, 26, 1), (16, 30, 1), (17, 25, 1), (17, 37, 1), (17, 22, 1), (18, 36, 1), (19, 20, 1), (21, 34, 1), (21, 36, 1), (21, 26, 1), (22, 24, 1), (22, 25, 1), (23, 32, 1), (24, 26, 1), (24, 29, 2), (25, 38, 1), (27, 32, 1), (29, 38, 1), (31, 36, 1)]
    list_edges = [(0, 8, 2), (0, 14, 2), (1, 12, 1), (2, 33, 1), (2, 34, 1), (2, 20, 1), (2, 10, 1), (3, 35, 1), (3, 28, 1), (3, 39, 1), (4, 32, 1), (5, 6, 2), (5, 15, 1), (6, 27, 1), (6, 12, 1), (7, 21, 1), (8, 31, 1), (9, 25, 2), (9, 11, 1), (9, 12, 1), (10, 32, 1), (10, 37, 1), (10, 21, 1), (11, 31, 1), (12, 18, 1), (13, 31, 1), (14, 39, 1), (16, 17, 1), (16, 36, 1), (16, 29, 1), (16, 21, 1), (19, 21, 1), (22, 32, 1), (23, 31, 1), (24, 25, 1), (24, 26, 1), (24, 30, 1), (25, 38, 1), (27, 35, 1), (27, 28, 2), (28, 32, 1), (35, 39, 2)]
   #list_edges = [(0, 36, 1), (1, 8, 2), (1, 27, 1), (1, 36, 1), (2, 34, 1), (3, 5, 1), (4, 33, 1), (4, 27, 1), (5, 16, 1), (5, 18, 1), (5, 31, 1), (6, 8, 1), (6, 27, 1), (6, 37, 1), (7, 8, 1), (9, 22, 1), (10, 24, 1), (10, 18, 1), (10, 28, 1), (10, 39, 1), (11, 24, 1), (12, 24, 1), (13, 24, 1), (13, 18, 1), (13, 21, 1), (13, 14, 1), (14, 35, 3), (15, 36, 1), (16, 32, 1), (16, 25, 1), (16, 30, 1), (17, 26, 1), (18, 20, 1), (19, 31, 1), (22, 34, 1), (22, 37, 1), (23, 36, 1), (26, 31, 1), (29, 34, 1), (31, 34, 1), (33, 37, 2)]
    #list_edges =  [(0, 33, 1), (1, 39, 1), (2, 33, 1), (2, 11, 1), (2, 22, 2), (3, 25, 1), (3, 5, 1), (3, 17, 2), (4, 39, 1), (5, 18, 1), (6, 14, 1), (7, 22, 1), (8, 11, 1), (8, 37, 1), (8, 14, 2), (9, 17, 1), (9, 10, 1), (9, 21, 2), (11, 12, 1), (11, 30, 1), (13, 19, 1), (13, 28, 1), (13, 21, 1), (14, 25, 1), (15, 33, 1), (16, 25, 1), (17, 37, 1), (19, 23, 1), (20, 33, 1), (21, 39, 1), (22, 32, 1), (23, 26, 2), (23, 38, 1), (24, 25, 1), (26, 27, 1), (26, 31, 1), (28, 29, 1), (34, 37, 1), (35, 38, 1), (36, 39, 1)]
    #list_edges = [(0, 33, 1), (1, 37, 1), (2, 33, 2), (2, 11, 1), (2, 25, 1), (3, 25, 1), (3, 4, 1), (3, 22, 1), (3, 39, 1), (5, 14, 1), (5, 15, 1), (6, 11, 1), (7, 21, 1), (8, 24, 1), (8, 25, 1), (8, 14, 2), (9, 37, 1), (9, 14, 1), (9, 21, 2), (10, 39, 1), (11, 27, 1), (11, 30, 1), (12, 22, 1), (13, 17, 2), (13, 31, 1), (16, 22, 1), (17, 19, 1), (17, 21, 1), (18, 33, 1), (19, 23, 1), (20, 39, 1), (22, 32, 1), (23, 28, 1), (23, 38, 2), (25, 36, 1), (28, 29, 1), (34, 37, 1), (35, 39, 1)]
    #list_edges = [(0, 11, 1), (1, 3, 1), (2, 22, 2), (2, 5, 1), (2, 14, 1), (3, 33, 1), (3, 17, 2), (4, 25, 1), (5, 12, 1), (6, 11, 1), (7, 39, 1), (8, 33, 1), (8, 14, 2), (8, 25, 1), (9, 26, 1), (9, 21, 2), (9, 15, 1), (10, 14, 1), (11, 32, 1), (11, 37, 1), (13, 26, 1), (16, 22, 1), (17, 39, 1), (17, 31, 1), (18, 22, 1), (19, 23, 2), (20, 21, 1), (21, 25, 1), (23, 33, 1), (23, 37, 1), (24, 25, 1), (26, 27, 1), (26, 38, 1), (28, 29, 1), (28, 38, 1), (30, 33, 1), (34, 37, 1), (35, 39, 1), (36, 39, 1)]
    #logp
    list_edges = [(0, 9, 1), (0, 5, 1), (0, 30, 1), (0, 31, 1), (1, 9, 1), (2, 17, 1), (2, 13, 1), (2, 22, 1), (2, 31, 1), (3, 13, 1), (4, 17, 1), (6, 23, 1), (6, 11, 1), (6, 12, 1), (6, 7, 1), (8, 25, 1), (8, 27, 1), (8, 22, 1), (8, 9, 1), (9, 18, 1), (10, 18, 2), (10, 35, 1), (10, 21, 1), (13, 32, 1), (13, 33, 1), (14, 17, 1), (15, 17, 1), (16, 18, 1), (16, 28, 2), (16, 23, 1), (19, 22, 1), (20, 23, 1), (21, 36, 1), (21, 38, 2), (22, 39, 1), (23, 37, 1), (24, 31, 1), (26, 38, 1), (28, 34, 1), (28, 38, 1), (29, 31, 1)]
    list_edges = [(0, 14, 1), (1, 18, 1), (2, 20, 1), (3, 15, 1), (4, 20, 1), (5, 14, 1), (6, 38, 1), (7, 23, 1), (7, 20, 1), (7, 14, 1), (7, 15, 1), (8, 14, 1), (9, 15, 1), (10, 23, 1), (11, 17, 1), (11, 36, 1), (11, 29, 1), (11, 15, 1), (12, 33, 1), (12, 18, 1), (12, 28, 1), (12, 39, 1), (13, 18, 1), (16, 23, 1), (18, 38, 1), (19, 34, 1), (19, 21, 1), (19, 30, 1), (19, 29, 1), (20, 32, 1), (21, 26, 1), (21, 37, 1), (21, 39, 1), (22, 38, 1), (23, 27, 1), (24, 29, 1), (25, 38, 1), (29, 31, 1), (35, 39, 1)]
    list_edges = [(0, 32, 1), (1, 3, 1), (1, 4, 1), (1, 22, 1), (1, 31, 1), (2, 4, 1), (2, 10, 1), (2, 19, 1), (2, 36, 1), (4, 16, 1), (4, 33, 1), (5, 22, 1), (6, 9, 1), (6, 11, 2), (6, 37, 1), (7, 9, 1), (8, 32, 1), (8, 19, 1), (8, 20, 1), (8, 39, 1), (9, 28, 1), (9, 12, 1), (11, 14, 1), (11, 13, 1), (13, 19, 1), (13, 25, 1), (13, 26, 1), (14, 19, 1), (14, 17, 1), (14, 29, 1), (15, 22, 1), (18, 31, 1), (21, 22, 1), (23, 31, 1), (24, 37, 1), (27, 31, 1), (30, 37, 1), (32, 34, 1), (32, 38, 1), (35, 37, 1)]
    list_edges = [(0, 16, 1), (0, 10, 1), (0, 6, 1), (0, 15, 1), (1, 34, 1), (2, 18, 1), (2, 19, 2), (2, 5, 1), (3, 34, 1), (4, 24, 1), (4, 35, 1), (4, 20, 1), (4, 7, 1), (7, 32, 1), (7, 9, 2), (8, 39, 1), (9, 34, 1), (9, 15, 1), (10, 32, 1), (10, 20, 1), (10, 39, 1), (11, 24, 1), (12, 24, 1), (13, 24, 1), (14, 39, 1), (15, 30, 1), (15, 32, 1), (17, 32, 1), (17, 25, 1), (17, 19, 1), (17, 30, 1), (19, 22, 1), (20, 30, 1), (20, 39, 1), (21, 35, 1), (23, 28, 1), (25, 36, 2), (25, 38, 1), (26, 30, 1), (27, 34, 1), (28, 38, 3), (29, 36, 1), (31, 35, 1), (33, 35, 1), (36, 37, 1)]
    list_edges = [(0, 1, 1), (0, 18, 1), (0, 19, 1), (0, 23, 1), (2, 17, 1), (2, 27, 1), (2, 12, 1), (2, 14, 1), (3, 8, 1), (3, 10, 1), (3, 11, 1), (3, 6, 1), (4, 37, 1), (5, 8, 3), (5, 12, 1), (7, 12, 1), (7, 13, 1), (7, 38, 1), (7, 37, 1), (9, 19, 1), (9, 32, 1), (9, 35, 1), (9, 20, 1), (12, 28, 1), (15, 32, 1), (15, 25, 1), (15, 19, 1), (15, 20, 1), (16, 32, 1), (16, 36, 1), (16, 20, 1), (16, 38, 1), (19, 34, 1), (20, 38, 1), (21, 24, 1), (21, 33, 1), (21, 26, 1), (21, 25, 1), (22, 37, 1), (25, 26, 2), (26, 36, 1), (29, 32, 1), (30, 38, 1), (31, 37, 1), (36, 39, 1)]    
    list_edges = [(0, 39, 1), (0, 23, 1), (0, 5, 1), (0, 7, 1), (1, 4, 1), (1, 5, 1), (1, 6, 1), (1, 7, 1), (2, 7, 1), (3, 7, 1), (4, 32, 1), (4, 18, 1), (4, 38, 1), (5, 33, 1), (5, 35, 1), (8, 39, 1), (9, 26, 1), (9, 11, 1), (9, 29, 1), (9, 38, 1), (10, 19, 1), (10, 34, 1), (10, 11, 1), (10, 20, 1), (11, 36, 1), (11, 13, 1), (12, 23, 1), (14, 39, 1), (15, 39, 1), (16, 23, 1), (17, 23, 1), (19, 27, 1), (19, 28, 1), (19, 21, 1), (20, 25, 1), (20, 30, 1), (20, 31, 1), (22, 38, 1), (37, 38, 1)]
    list_edges = [(0, 14, 1), (1, 25, 1), (1, 5, 1), (1, 6, 1), (1, 21, 1), (2, 14, 1), (3, 32, 1), (3, 17, 1), (3, 18, 1), (3, 30, 1), (4, 8, 1), (4, 16, 1), (4, 20, 1), (4, 24, 1), (6, 19, 1), (6, 28, 1), (6, 13, 1), (7, 33, 1), (9, 33, 1), (9, 28, 1), (9, 13, 1), (9, 14, 1), (10, 37, 1), (11, 13, 1), (12, 14, 1), (13, 24, 1), (15, 19, 1), (15, 17, 1), (15, 27, 1), (15, 24, 1), (17, 27, 1), (17, 19, 1), (19, 36, 1), (22, 24, 1), (22, 26, 1), (22, 27, 1), (22, 28, 1), (23, 33, 1), (26, 34, 2), (26, 37, 1), (27, 29, 1), (28, 37, 1), (31, 33, 1), (34, 35, 1), (34, 39, 1), (37, 38, 1)]
    list_edges = [(0, 13, 1), (0, 6, 1), (0, 7, 2), (1, 17, 1), (1, 2, 1), (1, 28, 1), (1, 9, 1), (2, 34, 1), (2, 36, 1), (2, 13, 1), (3, 17, 1), (4, 24, 2), (4, 34, 1), (4, 11, 1), (5, 7, 1), (7, 27, 1), (8, 17, 2), (8, 34, 1), (8, 13, 1), (9, 35, 1), (9, 28, 1), (9, 31, 1), (10, 18, 1), (10, 19, 1), (10, 14, 1), (10, 15, 1), (11, 24, 1), (11, 28, 1), (11, 18, 1), (12, 13, 1), (16, 25, 1), (16, 26, 1), (16, 20, 1), (16, 30, 1), (18, 37, 1), (18, 30, 1), (21, 36, 1), (22, 36, 1), (23, 34, 1), (24, 39, 1), (28, 38, 1), (29, 36, 1), (30, 32, 1), (30, 37, 1), (33, 37, 1), (33, 39, 2)]
    #QED
    #list_edges = [(0, 17, 1), (0, 12, 1), (0, 37, 2), (1, 18, 1), (1, 34, 1), (1, 21, 1), (2, 33, 2), (2, 27, 1), (2, 37, 1), (3, 13, 1), (4, 32, 1), (5, 32, 1), (6, 15, 1), (7, 27, 1), (8, 29, 1), (9, 32, 1), (10, 33, 1), (11, 27, 1), (12, 33, 1), (12, 37, 1), (12, 29, 1), (13, 32, 1), (13, 35, 1), (13, 36, 1), (14, 24, 1), (14, 36, 1), (14, 20, 1), (14, 31, 1), (15, 17, 2), (15, 39, 1), (16, 17, 1), (16, 34, 1), (16, 22, 1), (18, 22, 1), (19, 36, 1), (21, 38, 1), (21, 30, 1), (22, 38, 1), (23, 36, 1), (25, 35, 1), (26, 27, 1), (28, 35, 1), (28, 30, 2), (28, 38, 1), (30, 35, 1), (34, 38, 1)]
    #list_edges = [(0, 37, 2), (0, 29, 1), (0, 15, 1), (1, 16, 1), (1, 18, 1), (1, 34, 1), (2, 35, 1), (2, 12, 2), (2, 37, 1), (3, 17, 1), (4, 27, 1), (5, 33, 1), (6, 27, 1), (7, 33, 1), (8, 29, 1), (9, 32, 1), (10, 12, 1), (11, 36, 1), (12, 32, 1), (13, 33, 1), (13, 27, 1), (13, 36, 1), (13, 38, 1), (14, 24, 1), (14, 36, 1), (14, 20, 1), (14, 31, 1), (15, 21, 2), (15, 39, 1), (16, 17, 1), (16, 34, 1), (17, 35, 1), (17, 36, 1), (18, 34, 1), (19, 27, 1), (21, 38, 1), (22, 38, 1), (22, 30, 2), (23, 32, 1), (25, 37, 1), (26, 32, 1), (28, 33, 1), (28, 35, 1), (28, 30, 1), (28, 38, 1), (30, 35, 1)]
    #logp

    list_edges = [(0, 8, 1), (0, 33, 1), (0, 12, 1), (0, 39, 1), (1, 9, 1), (1, 30, 1), (1, 6, 1), (1, 39, 1), (2, 22, 1), (3, 16, 1), (3, 34, 1), (3, 30, 1), (3, 14, 1), (4, 11, 1), (4, 14, 1), (4, 30, 1), (4, 39, 1), (5, 11, 2), (5, 15, 2), (7, 30, 1), (9, 26, 1), (9, 35, 1), (9, 20, 1), (10, 24, 1), (10, 11, 1), (10, 14, 1), (10, 31, 1), (13, 18, 1), (13, 15, 1), (13, 21, 1), (13, 23, 1), (14, 15, 1), (17, 22, 1), (19, 34, 1), (19, 27, 1), (19, 36, 1), (19, 22, 1), (22, 32, 1), (25, 32, 1), (27, 32, 1), (27, 28, 2), (28, 32, 1), (28, 34, 1), (29, 39, 1), (34, 36, 1), (36, 37, 1), (36, 38, 1)]
    
    list_edges = [(0, 1, 1), (1, 33, 1), (1, 34, 1), (1, 5, 1), (2, 9, 1), (2, 3, 1), (2, 20, 1), (2, 12, 1), (3, 24, 1), (3, 31, 2), (4, 9, 1), (6, 24, 1), (7, 9, 1), (8, 32, 1), (8, 29, 1), (8, 30, 1), (8, 31, 1), (9, 14, 1), (10, 17, 1), (10, 26, 1), (10, 11, 1), (10, 31, 1), (12, 33, 2), (12, 27, 1), (13, 18, 1), (13, 39, 1), (13, 21, 1), (13, 23, 1), (15, 16, 1), (15, 27, 1), (15, 37, 1), (15, 21, 1), (16, 22, 3), (18, 37, 1), (18, 27, 1), (18, 21, 1), (19, 24, 1), (20, 37, 1), (20, 21, 1), (22, 35, 1), (24, 28, 1), (25, 33, 1), (27, 38, 1), (36, 37, 1)]
    list_edges = [(0, 2, 1), (1, 10, 1), (2, 10, 1), (2, 18, 1), (2, 31, 1), (3, 10, 1), (3, 27, 1), (3, 36, 1), (3, 30, 1), (4, 10, 1), (5, 8, 1), (5, 17, 1), (5, 13, 1), (5, 24, 1), (6, 22, 1), (6, 27, 1), (6, 30, 1), (6, 14, 1), (7, 34, 1), (7, 36, 2), (7, 30, 1), (9, 18, 1), (11, 30, 1), (12, 24, 1), (12, 34, 1), (12, 27, 2), (15, 16, 1), (15, 19, 1), (15, 22, 1), (15, 39, 1), (16, 25, 1), (16, 20, 1), (16, 21, 1), (18, 26, 1), (18, 38, 1), (19, 39, 1), (19, 23, 1), (19, 22, 1), (22, 23, 1), (23, 35, 1), (23, 39, 1), (24, 33, 1), (24, 37, 1), (28, 36, 1), (29, 34, 1), (32, 34, 1), (35, 39, 1)]

    #list_edges = [(0, 35, 1), (0, 4, 2), (0, 15, 1), (1, 33, 1), (1, 36, 2), (1, 23, 1), (2, 23, 1), (3, 4, 1), (4, 9, 1), (5, 12, 1), (6, 12, 1), (7, 33, 1), (7, 12, 1), (7, 22, 1), (7, 23, 1), (8, 12, 1), (8, 22, 2), (8, 23, 1), (10, 36, 1), (10, 27, 2), (10, 20, 1), (11, 35, 1), (13, 26, 1), (13, 27, 1), (13, 36, 1), (13, 31, 1), (14, 35, 1), (14, 26, 1), (14, 39, 1), (14, 31, 1), (16, 26, 1), (16, 35, 1), (16, 28, 1), (16, 31, 1), (17, 26, 1), (18, 24, 2), (18, 25, 1), (18, 39, 1), (19, 31, 1), (21, 27, 1), (22, 29, 1), (24, 25, 1), (24, 34, 1), (25, 37, 1), (25, 39, 1), (30, 33, 1), (32, 33, 1), (38, 39, 1)]
    #6.818
    #list_edges = [(0, 8, 1), (0, 33, 1), (0, 12, 1), (0, 39, 1), (1, 9, 1), (1, 30, 1), (1, 6, 1), (1, 39, 1), (2, 22, 1), (3, 16, 1), (3, 34, 1), (3, 30, 1), (3, 14, 1), (4, 11, 1), (4, 14, 1), (4, 30, 1), (4, 39, 1), (5, 11, 2), (5, 15, 2), (7, 30, 1), (9, 26, 1), (9, 35, 1), (9, 20, 1), (10, 24, 1), (10, 11, 1), (10, 14, 1), (10, 31, 1), (13, 18, 1), (13, 15, 1), (13, 21, 1), (13, 23, 1), (14, 15, 1), (17, 22, 1), (19, 34, 1), (19, 27, 1), (19, 36, 1), (19, 22, 1), (22, 32, 1), (25, 32, 1), (27, 32, 1), (27, 28, 2), (28, 32, 1), (28, 34, 1), (29, 39, 1), (34, 36, 1), (36, 37, 1), (36, 38, 1)]
    
    
    #6.65
    #list_edges = [(0, 36, 1), (1, 8, 1), (1, 24, 1), (1, 19, 1), (1, 22, 1), (2, 36, 1), (3, 35, 1), (4, 11, 1), (5, 19, 1), (6, 39, 1), (7, 24, 2), (7, 33, 1), (7, 22, 1), (9, 36, 1), (10, 19, 1), (11, 33, 1), (11, 21, 2), (12, 21, 1), (13, 25, 1), (13, 26, 1), (13, 38, 2), (14, 33, 1), (14, 36, 1), (14, 22, 1), (14, 31, 1), (15, 19, 1), (16, 31, 1), (17, 33, 1), (17, 28, 1), (17, 30, 1), (17, 31, 1), (18, 22, 1), (20, 21, 1), (23, 35, 1), (23, 29, 1), (23, 38, 1), (23, 39, 1), (24, 37, 1), (27, 39, 1), (29, 32, 1), (29, 35, 1), (29, 30, 1), (30, 32, 1), (30, 38, 1), (31, 34, 1), (32, 35, 1), (32, 39, 1)]
   
    #6.55
    #list_edges = [(0, 14, 1), (1, 25, 1), (1, 5, 1), (1, 6, 1), (1, 21, 1), (2, 14, 1), (3, 32, 1), (3, 17, 1), (3, 18, 1), (3, 30, 1), (4, 8, 1), (4, 16, 1), (4, 20, 1), (4, 24, 1), (6, 19, 1), (6, 28, 1), (6, 13, 1), (7, 33, 1), (9, 33, 1), (9, 28, 1), (9, 13, 1), (9, 14, 1), (10, 37, 1), (11, 13, 1), (12, 14, 1), (13, 24, 1), (15, 19, 1), (15, 17, 1), (15, 27, 1), (15, 24, 1), (17, 27, 1), (17, 19, 1), (19, 36, 1), (22, 24, 1), (22, 26, 1), (22, 27, 1), (22, 28, 1), (23, 33, 1), (26, 34, 2), (26, 37, 1), (27, 29, 1), (28, 37, 1), (31, 33, 1), (34, 35, 1), (34, 39, 1), (37, 38, 1)]
    
    #5.56
    #list_edges = [(0, 2, 1), (1, 10, 1), (2, 10, 1), (2, 18, 1), (2, 31, 1), (3, 10, 1), (3, 27, 1), (3, 36, 1), (3, 30, 1), (4, 10, 1), (5, 8, 1), (5, 17, 1), (5, 13, 1), (5, 24, 1), (6, 22, 1), (6, 27, 1), (6, 30, 1), (6, 14, 1), (7, 34, 1), (7, 36, 2), (7, 30, 1), (9, 18, 1), (11, 30, 1), (12, 24, 1), (12, 34, 1), (12, 27, 2), (15, 16, 1), (15, 19, 1), (15, 22, 1), (15, 39, 1), (16, 25, 1), (16, 20, 1), (16, 21, 1), (18, 26, 1), (18, 38, 1), (19, 39, 1), (19, 23, 1), (19, 22, 1), (22, 23, 1), (23, 35, 1), (23, 39, 1), (24, 33, 1), (24, 37, 1), (28, 36, 1), (29, 34, 1), (32, 34, 1), (35, 39, 1)]

    #5.40

    list_edges = [(0, 10, 3), (0, 20, 1), (1, 20, 1), (2, 14, 1), (3, 9, 1), (4, 11, 1), (5, 16, 1), (5, 13, 1), (5, 14, 1), (5, 21, 1), (6, 36, 1), (6, 28, 1), (6, 22, 1), (6, 20, 1), (7, 11, 1), (8, 26, 1), (9, 11, 1), (9, 25, 1), (9, 31, 1), (10, 25, 1), (11, 27, 1), (12, 32, 1), (12, 33, 1), (12, 19, 1), (12, 14, 1), (14, 35, 1), (15, 17, 1), (15, 26, 1), (15, 27, 1), (15, 38, 1), (18, 27, 1), (20, 29, 1), (23, 26, 1), (24, 33, 1), (25, 34, 1), (25, 30, 1), (26, 33, 1), (27, 39, 1), (33, 37, 1)]

    #5.57
    list_edges = [(0, 9, 1), (0, 5, 1), (0, 30, 1), (0, 31, 1), (1, 9, 1), (2, 17, 1), (2, 13, 1), (2, 22, 1), (2, 31, 1), (3, 13, 1), (4, 17, 1), (6, 23, 1), (6, 11, 1), (6, 12, 1), (6, 7, 1), (8, 25, 1), (8, 27, 1), (8, 22, 1), (8, 9, 1), (9, 18, 1), (10, 18, 2), (10, 35, 1), (10, 21, 1), (13, 32, 1), (13, 33, 1), (14, 17, 1), (15, 17, 1), (16, 18, 1), (16, 28, 2), (16, 23, 1), (19, 22, 1), (20, 23, 1), (21, 36, 1), (21, 38, 2), (22, 39, 1), (23, 37, 1), (24, 31, 1), (26, 38, 1), (28, 34, 1), (28, 38, 1), (29, 31, 1)]

    #5.96
    #list_edges = [(0, 35, 1), (1, 20, 1), (1, 35, 1), (1, 12, 1), (1, 15, 1), (2, 35, 1), (3, 20, 2), (3, 38, 1), (3, 23, 1), (4, 5, 1), (5, 32, 2), (5, 34, 1), (6, 34, 1), (6, 21, 1), (6, 13, 1), (6, 7, 1), (8, 32, 1), (8, 34, 1), (8, 38, 1), (8, 15, 1), (9, 20, 1), (10, 35, 1), (11, 16, 1), (11, 38, 1), (11, 14, 1), (11, 15, 1), (14, 25, 3), (15, 36, 1), (16, 19, 2), (16, 18, 1), (17, 25, 1), (17, 26, 1), (17, 18, 1), (17, 29, 1), (18, 28, 1), (18, 30, 1), (19, 39, 2), (22, 33, 1), (22, 31, 1), (22, 39, 2), (24, 32, 1), (27, 38, 1), (31, 33, 2), (34, 37, 1)]

    

    #5.87
    list_edges = [(0, 35, 1), (0, 4, 2), (0, 15, 1), (1, 33, 1), (1, 36, 2), (1, 23, 1), (2, 23, 1), (3, 4, 1), (4, 9, 1), (5, 12, 1), (6, 12, 1), (7, 33, 1), (7, 12, 1), (7, 22, 1), (7, 23, 1), (8, 12, 1), (8, 22, 2), (8, 23, 1), (10, 36, 1), (10, 27, 2), (10, 20, 1), (11, 35, 1), (13, 26, 1), (13, 27, 1), (13, 36, 1), (13, 31, 1), (14, 35, 1), (14, 26, 1), (14, 39, 1), (14, 31, 1), (16, 26, 1), (16, 35, 1), (16, 28, 1), (16, 31, 1), (17, 26, 1), (18, 24, 2), (18, 25, 1), (18, 39, 1), (19, 31, 1), (21, 27, 1), (22, 29, 1), (24, 25, 1), (24, 34, 1), (25, 37, 1), (25, 39, 1), (30, 33, 1), (32, 33, 1), (38, 39, 1)]
    
    #5.00
    list_edges = [(0, 39, 1), (0, 23, 1), (0, 5, 1), (0, 7, 1), (1, 4, 1), (1, 5, 1), (1, 6, 1), (1, 7, 1), (2, 7, 1), (3, 7, 1), (4, 32, 1), (4, 18, 1), (4, 38, 1), (5, 33, 1), (5, 35, 1), (8, 39, 1), (9, 26, 1), (9, 11, 1), (9, 29, 1), (9, 38, 1), (10, 19, 1), (10, 34, 1), (10, 11, 1), (10, 20, 1), (11, 36, 1), (11, 13, 1), (12, 23, 1), (14, 39, 1), (15, 39, 1), (16, 23, 1), (17, 23, 1), (19, 27, 1), (19, 28, 1), (19, 21, 1), (20, 25, 1), (20, 30, 1), (20, 31, 1), (22, 38, 1), (37, 38, 1)]

    
    
    
    #QED
    #0.920
    list_edges = [(0, 31, 1), (1, 31, 1), (2, 26, 1), (2, 21, 1), (2, 13, 1), (3, 10, 1), (3, 27, 1), (3, 14, 1), (3, 7, 1), (4, 20, 1), (5, 8, 1), (5, 26, 1), (5, 10, 1), (5, 22, 1), (6, 24, 1), (6, 17, 1), (6, 13, 1), (6, 31, 1), (9, 27, 1), (10, 19, 1), (10, 39, 1), (11, 14, 1), (12, 26, 1), (14, 37, 1), (14, 30, 1), (15, 16, 1), (15, 24, 1), (15, 21, 1), (16, 25, 1), (16, 20, 1), (17, 18, 1), (17, 29, 1), (17, 23, 1), (20, 25, 1), (21, 35, 1), (21, 31, 1), (24, 25, 1), (26, 32, 1), (27, 28, 1), (27, 36, 1), (32, 35, 1), (33, 34, 1), (33, 35, 2), (33, 38, 1)]
    
    #0.916
    #list_edges = [(0, 21, 1), (1, 8, 1), (1, 17, 1), (1, 29, 2), (2, 24, 1), (2, 9, 1), (2, 28, 1), (2, 39, 1), (3, 19, 1), (4, 35, 1), (4, 19, 1), (4, 21, 1), (4, 7, 1), (5, 24, 1), (6, 24, 1), (7, 25, 1), (7, 37, 1), (8, 21, 1), (8, 38, 1), (8, 15, 1), (10, 29, 1), (11, 25, 2), (11, 18, 1), (11, 22, 1), (12, 35, 1), (13, 28, 1), (14, 38, 1), (16, 28, 1), (18, 25, 1), (18, 30, 1), (19, 27, 1), (19, 32, 1), (20, 33, 1), (20, 34, 1), (20, 31, 1), (21, 24, 1), (23, 28, 1), (26, 35, 2), (26, 29, 1), (26, 38, 1), (31, 33, 1), (31, 36, 1), (34, 36, 1), (34, 37, 1), (34, 38, 1)]
    
    #0.912
    #list_edges = [(0, 8, 1), (0, 16, 1), (0, 35, 1), (0, 36, 1), (1, 9, 1), (1, 14, 1), (2, 37, 1), (3, 4, 1), (3, 13, 2), (3, 29, 1), (4, 37, 2), (4, 13, 1), (5, 36, 1), (6, 29, 1), (7, 24, 1), (7, 27, 2), (9, 10, 1), (9, 20, 1), (9, 33, 1), (10, 32, 1), (10, 19, 1), (10, 12, 1), (11, 25, 2), (11, 29, 1), (11, 31, 1), (13, 27, 1), (14, 25, 1), (14, 35, 2), (15, 25, 1), (17, 36, 1), (18, 33, 1), (21, 33, 1), (22, 24, 1), (22, 34, 1), (22, 23, 1), (23, 27, 1), (23, 38, 2), (24, 26, 1), (26, 34, 1), (28, 33, 1), (29, 39, 1), (30, 37, 1), (34, 35, 1)]
    #0.9117
    #list_edges = [(0, 1, 1), (0, 11, 1), (0, 4, 1), (0, 38, 1), (1, 17, 1), (1, 5, 1), (1, 30, 1), (2, 5, 1), (3, 35, 1), (3, 36, 1), (3, 37, 1), (3, 5, 1), (5, 13, 1), (6, 38, 1), (7, 8, 1), (7, 27, 2), (8, 33, 1), (8, 23, 1), (9, 30, 1), (10, 38, 1), (12, 17, 1), (12, 21, 1), (14, 31, 1), (15, 32, 2), (15, 30, 1), (15, 31, 1), (16, 32, 1), (16, 30, 1), (16, 31, 2), (17, 32, 1), (17, 25, 1), (18, 38, 1), (19, 24, 1), (19, 25, 1), (19, 28, 1), (19, 22, 1), (20, 25, 2), (20, 29, 1), (20, 39, 1), (21, 29, 1), (21, 22, 2), (26, 33, 1), (26, 34, 1), (26, 27, 1), (27, 39, 1), (33, 39, 2)]
    #list_edges = [(0, 10, 3), (0, 20, 1), (1, 20, 1), (2, 14, 1), (3, 9, 1), (4, 11, 1), (5, 16, 1), (5, 13, 1), (5, 14, 1), (5, 21, 1), (6, 36, 1), (6, 28, 1), (6, 22, 1), (6, 20, 1), (7, 11, 1), (8, 26, 1), (9, 11, 1), (9, 25, 1), (9, 31, 1), (10, 25, 1), (11, 27, 1), (12, 32, 1), (12, 33, 1), (12, 19, 1), (12, 14, 1), (14, 35, 1), (15, 17, 1), (15, 26, 1), (15, 27, 1), (15, 38, 1), (18, 27, 1), (20, 29, 1), (23, 26, 1), (24, 33, 1), (25, 34, 1), (25, 30, 1), (26, 33, 1), (27, 39, 1), (33, 37, 1)]
    
    #9115
    #list_edges = [(0, 9, 1), (0, 37, 1), (0, 31, 2), (1, 11, 1), (1, 13, 1), (1, 39, 1), (2, 37, 1), (3, 26, 1), (3, 38, 1), (3, 30, 1), (3, 15, 1), (4, 24, 1), (4, 32, 1), (4, 28, 1), (4, 21, 1), (5, 37, 1), (6, 8, 1), (7, 37, 1), (8, 19, 1), (8, 12, 1), (8, 38, 1), (9, 13, 1), (9, 14, 1), (10, 31, 1), (11, 18, 2), (12, 16, 1), (13, 14, 1), (14, 38, 2), (17, 28, 2), (17, 22, 1), (17, 23, 1), (18, 20, 1), (18, 31, 1), (20, 32, 1), (21, 34, 1), (21, 29, 1), (21, 23, 1), (23, 25, 1), (23, 35, 1), (24, 27, 1), (24, 36, 1), (24, 33, 1), (28, 33, 1), (32, 33, 2)]


    #910
    list_edges = [(0, 2, 1), (0, 4, 1), (1, 9, 2), (1, 7, 1), (2, 32, 1), (2, 26, 1), (2, 9, 1), (3, 25, 1), (3, 14, 2), (3, 7, 1), (5, 16, 1), (5, 24, 1), (5, 18, 1), (5, 7, 1), (6, 11, 1), (7, 34, 1), (8, 10, 1), (8, 14, 1), (9, 10, 1), (10, 11, 2), (11, 14, 1), (12, 24, 1), (12, 38, 1), (12, 15, 1), (13, 16, 1), (15, 17, 1), (15, 37, 2), (16, 33, 1), (16, 23, 1), (17, 28, 1), (17, 27, 1), (17, 20, 1), (18, 19, 1), (18, 21, 1), (18, 22, 1), (24, 31, 2), (29, 38, 1), (30, 31, 1), (31, 37, 1), (35, 38, 1), (38, 39, 1)]
    #893
    list_edges = [(0, 31, 1), (1, 19, 1), (1, 27, 2), (1, 4, 1), (2, 39, 1), (3, 20, 1), (4, 24, 1), (4, 37, 1), (5, 19, 1), (6, 16, 1), (6, 33, 2), (6, 29, 1), (7, 17, 1), (7, 34, 1), (7, 35, 1), (7, 36, 1), (8, 28, 1), (9, 19, 1), (10, 28, 1), (11, 25, 1), (11, 19, 1), (11, 20, 1), (11, 28, 1), (12, 35, 1), (13, 27, 1), (14, 26, 2), (15, 18, 2), (15, 31, 1), (15, 23, 1), (16, 24, 1), (16, 35, 1), (18, 26, 1), (20, 21, 1), (22, 31, 1), (24, 31, 1), (26, 35, 1), (27, 32, 1), (28, 38, 1), (30, 33, 1), (33, 39, 1), (37, 39, 2)]
    #889
    #list_edges = [(0, 13, 1), (0, 6, 1), (1, 20, 1), (1, 39, 1), (2, 18, 1), (3, 30, 1), (4, 29, 1), (5, 15, 1), (6, 18, 1), (6, 29, 1), (6, 38, 1), (7, 25, 1), (7, 14, 1), (7, 30, 1), (7, 15, 1), (8, 24, 1), (8, 17, 1), (8, 36, 1), (9, 26, 1), (9, 10, 1), (10, 27, 1), (10, 37, 1), (10, 25, 1), (11, 13, 1), (11, 14, 1), (12, 17, 1), (12, 36, 1), (13, 25, 1), (13, 27, 1), (14, 39, 1), (15, 28, 1), (15, 22, 1), (16, 27, 1), (16, 36, 1), (17, 23, 1), (19, 38, 1), (20, 33, 2), (20, 35, 1), (21, 30, 1), (23, 39, 2), (24, 33, 1), (25, 32, 1), (31, 38, 1), (34, 38, 1)]
    for (u, v, w) in list_edges:
        G.add_edge(u, v)
        G[u][v]["weight"] = w

    mols = []
    smiles = []
    if guess_correct_molecules_from_graph(G, sys.argv[1]):
            #total += 1
            m1 = Chem.MolFromMol2File(sys.argv[1])
            if m1 != None:
                s = Chem.MolToSmiles(m1)
                m2 = Chem.AddHs(m1)
                smiles.append(s)
                mols.append(m2)
            

    print smiles, len(smiles)
    #with open('smiles.smi', 'w') as f:
    #    for smile in smiles:
    #        f.write(smile+"\n")
    #print "Valid:", valid, "Total:", total, "moltotal:",moltotal, "Perc:", valid/moltotal
    drawchem(mols)
